#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Future work
\end_layout

\begin_layout Standard
There is a large number off possible future projects that could follow after
 this work.
 The following concepts should include the most manageable and interesting
 ones.
\end_layout

\begin_layout Itemize
The newly introduced 
\begin_inset Formula $\Omega$
\end_inset

 variable was show to be very beneficial in a number of specific cases.
 However as it requires extra handling it was dropped from multifracturing
 formulation.
 Nevertheless some improvements tested on 
\begin_inset Formula $w$
\end_inset

 and 
\begin_inset Formula $U$
\end_inset

 variables, could be done on 
\begin_inset Formula $\Omega$
\end_inset

, and the multifracture formulation could be modified to use it as well.
 This could bring even further accuracy improvements.
\end_layout

\begin_layout Itemize
The speed equation formulation was constructed with strictly propagating
 fractures in mind.
 Another formulation could be developed that would be designed for closing
 fracture.
 This should have different expressions for tip asymptotics, and use a sort
 of reversed speed equation.
\end_layout

\begin_layout Itemize
More physical properties could be included in the formulation such as rock
 toughness, thermal expansion or viscosity effects and proppant transportation.
\end_layout

\begin_layout Itemize
A more dynamic approach to mesh sizes could be considered.
 Currently the mesh sizes are fixed, but each fracture could be assigned
 a different number of grid points.
 This could increase local accuracy in a few crucial fractures, or improve
 overall performance by decreasing grid density in some less important areas.
\end_layout

\begin_layout Itemize
So far only one dimensional leak off models were considered.
 In reality the fluid flow around the hydraulic fractures should be modeled
 independently by 2D or even 3D porous flow simulations.
 This could be achieved by some coupling of Darcy law flow solutions with
 the developed multifracturing model.
\end_layout

\begin_layout Itemize
Proper testing on real life hydraulic fracturing data should be carried
 on.
 This would require access to actual drilling logs, including microcosmic
 data which would allow attempts to match the theoretical model with some
 real outputs.
\end_layout

\begin_layout Itemize
And finally a larger project should exploit the fact that, as observed from
 initial condition and multifracturing tests, all fractures eventualy converge
 to large time asymptotes.
 Furthermore the computations are rather very repetitive.
 Having computed a solution for a single fracture in a set of specific condition
s, it would be reasonable to assume that this solution can be copied for
 other fractures developing in similar conditions.
 Thous for a multifracturing model it could be possible to create a precomputed
 table containing a range of sample solutions, for different 
\begin_inset Formula $q_{0}$
\end_inset

 values, and then just use the closest matching solution instead of repeating
 another computation for each new slightly perturbed fracture in multifracturing
 problem.
 Such an approach would allow for huge problems to be computed instantaneously.
 This could produce fairy accurate result, with fine table resolution and
 some error corrections techniques, which could be used in treatment optimizatio
n algorithms, where placements of multiple wheels must be checked in order
 to find most profitable solution.
\end_layout

\end_body
\end_document
